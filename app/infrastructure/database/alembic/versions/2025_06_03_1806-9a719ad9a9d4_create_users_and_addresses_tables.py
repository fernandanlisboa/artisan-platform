"""create users and addresses tables

Revision ID: 9a719ad9a9d4
Revises: bcab2115cc64
Create Date: 2025-06-03 18:06:32.013137

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = '9a719ad9a9d4' # Mantenha seu ID de revisão
down_revision: Union[str, None] = 'bcab2115cc64' # Mantenha seu down_revision
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. REMOVER CHAVES ESTRANGEIRAS QUE SERÃO AFETADAS OU REMOVIDAS
    # Isso é crucial para evitar o erro "Cannot drop table 'Address' referenced by a foreign key"
    op.drop_constraint(op.f('users_ibfk_1'), 'users', type_='foreignkey') # Nome da FK que o erro indica

    # 2. RENOMEAR TABELAS (se 'Address' (capital A) existe e precisa ser 'addresses' (minuscula))
    # Se 'Address' com A maiúsculo existia, vamos renomeá-la para 'addresses' com minúsculas.
    # Isso é mais seguro que dropar e recriar, se houver dados.
    # Se você tem certeza que a tabela 'Address' NÃO existe, pode REMOVER esta linha e o 'op.create_table('addresses')' logo abaixo.
    try: # Tenta renomear, se não existir, vai para o except
        op.rename_table('Address', 'addresses') # Renomeia a tabela antiga para o nome correto
    except sa.exc.OperationalError:
        # Se a tabela 'Address' não existe, então crie 'addresses' do zero
        op.create_table('addresses',
            sa.Column('address_id', sa.String(length=36), nullable=False),
            sa.Column('street', sa.String(length=255), nullable=False),
            sa.Column('number', sa.String(length=20), nullable=True),
            sa.Column('complement', sa.String(length=100), nullable=True),
            sa.Column('neighborhood', sa.String(length=100), nullable=False),
            sa.Column('city', sa.String(length=100), nullable=False),
            sa.Column('state', sa.String(length=2), nullable=False),
            sa.Column('country', sa.String(length=100), nullable=False),
            sa.Column('zip_code', sa.String(length=10), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.Column('updated_at', sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint('address_id')
        )
    
    # 3. Alterações de colunas na tabela 'users'
    # Adicionar novas colunas que o modelo agora tem
    op.add_column('users', sa.Column('password', sa.String(length=128), nullable=False))
    op.add_column('users', sa.Column('registration_date', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('status', sa.String(length=20), nullable=False))
    op.add_column('users', sa.Column('id_endereco', sa.String(length=36), nullable=True)) # Nova FK

    # Criar a nova chave estrangeira para 'addresses'
    op.create_foreign_key('fk_users_address_id', 'users', 'addresses', ['id_endereco'], ['address_id'])

    # Remover colunas antigas que não são mais necessárias no modelo 'users'
    op.drop_column('users', 'address_id') # Se o nome da coluna antiga era address_id e agora é id_endereco
    op.drop_column('users', 'password_hash')
    op.drop_column('users', 'role')
    op.drop_column('users', 'email_confirmed')
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'address')
    op.drop_column('users', 'name')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Corrigido: Código para REVERTER as mudanças na ordem INVERSA
    
    # Adicionar colunas antigas novamente
    op.add_column('users', sa.Column('name', mysql.VARCHAR(length=100), nullable=True))
    op.add_column('users', sa.Column('address', mysql.VARCHAR(length=255), nullable=True))
    op.add_column('users', sa.Column('created_at', mysql.DATETIME(), nullable=True))
    op.add_column('users', sa.Column('updated_at', mysql.DATETIME(), nullable=True))
    op.add_column('users', sa.Column('email_confirmed', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('role', mysql.VARCHAR(length=20), nullable=False))
    op.add_column('users', sa.Column('password_hash', mysql.VARCHAR(length=128), nullable=False))
    op.add_column('users', sa.Column('address_id', mysql.VARCHAR(length=36), nullable=True)) # Coluna antiga

    # Remover a nova chave estrangeira e a nova coluna
    op.drop_constraint('fk_users_address_id', 'users', type_='foreignkey')
    op.drop_column('users', 'id_endereco')
    op.drop_column('users', 'status')
    op.drop_column('users', 'registration_date')
    op.drop_column('users', 'password')

    # Recriar a chave estrangeira antiga para 'Address'
    op.create_foreign_key(op.f('users_ibfk_1'), 'users', 'Address', ['address_id'], ['id']) # Reverter a FK antiga
    
    # Renomear 'addresses' de volta para 'Address' (ou recriar se foi dropada)
    op.rename_table('addresses', 'Address')
    
    # ### end Alembic commands ###