# .github/workflows/deploy.yml

name: Artisan Platform - Continuous Deployment # Nome do workflow

on:
  push:
    branches:
      - main # Gatilho para deploys automáticos em 'main' (após merge de develop)
  workflow_dispatch: # Permite acionar o workflow manualmente na interface do GitHub Actions

jobs:
  deploy:
    name: Deploy to Production # Nome do job de deploy
    runs-on: ubuntu-latest # O sistema operacional onde o job será executado
    # needs: [build-test-security] # Removido para evitar erro de dependência inválida.

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12 # Mantendo 3.9 para consistência. Altere para '3.12' se seu Dockerfile também usar 3.12.
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' 

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Autenticar no Google Cloud
        uses: google-github-actions/auth@v2 
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }} 
          project_id: ${{ secrets.GCP_PROJECT_ID }} 

      - name: Configurar Docker para Google Container Registry/Artifact Registry
        run: gcloud auth configure-docker

      - name: Construir e Publicar Imagem Docker
        uses: docker/build-push-action@v5 
        with:
          context: . # O contexto é a raiz do seu projeto (onde o Dockerfile está)
          push: true 
          tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/artisan-backend:${{ github.sha }} 

      - name: Configurar GCloud CLI para Cloud SQL Connect (para migrações)
        uses: google-github-actions/setup-gcloud@v2

      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          # Conecta-se à instância Cloud SQL e executa o comando Alembic
          # Substitua mysql-db pelo nome real da sua instância Cloud SQL no GCP.
          # Substitua app-user pelo nome do usuário do DB com permissão para migrações.
          gcloud sql connect mysql-db --user=app-user --quiet --password=${{ secrets.DB_PROD_MIGRATION_PASSWORD }} <<EOF
          cd /github/workspace/app/infrastructure/database/alembic
          alembic upgrade head
          EOF
        working-directory: . 
        env:
          # Variáveis de ambiente para o Alembic se conectar ao DB de produção.
          # O formato é CHAVE: VALOR
          DATABASE_URL: mysql+pymysql://app-user:${{ secrets.DB_PROD_MIGRATION_PASSWORD }}@${{ secrets.DB_PROD_HOST }}:3306/artisan_platform 

      - name: Deploy application
        uses: google-github-actions/deploy-cloudrun@v2 
        with:
          service: artisan-backend-api # Nome do seu serviço Cloud Run
          region: us-central1 # Mude para sua região do GCP
          image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/artisan-backend:${{ github.sha }} 
          
          # --- CORREÇÃO AQUI NO BLOCO 'env_vars' e 'secrets' (Linha 91) ---
          env_vars: | # Corrigido para string multilinha, pois o deploy-cloudrun espera um bloco de texto
            FLASK_DEBUG=False
            DATABASE_URL=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/DB_PROD_URL/versions/latest
            JWT_SECRET_KEY=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/JWT_SECRET_KEY_PROD/versions/latest
          
          # Se você quiser passar segredos DIRETAMENTE via este bloco 'secrets' (menos seguro para prod):
          # secrets: # 'secrets' espera um MAPEAMENTO (dicionário) de CHAVE: VALOR
          #   DB_PROD_URL: ${{ secrets.DB_PROD_URL }}
          #   JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY_PROD }}
          # --- FIM DA CORREÇÃO ---

      - name: Post-deployment tasks
        run: |
          echo "Running post-deployment tasks..."
          echo "Post-deployment tasks completed!"