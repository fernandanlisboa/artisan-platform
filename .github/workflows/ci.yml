name: Artisan Platform CI & Security Scan

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  # JOB 1: tests with multiple Python versions
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', 3.11, 3.12]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: artisan_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov flake8 mysql-connector-python
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Configure test environment
      run: |
        cp .env.example .env
        echo "FLASK_ENV=testing" >> .env
        echo "DATABASE_URL=mysql+mysqlconnector://root:${{ secrets.DB_PASSWORD }}@127.0.0.1:3306/artisan_test" >> .env
        echo "FLASK_SECRET_KEY=testing-key-for-ci" >> .env
    
    - name: Run Migrations with Alembic Action
      uses: OpenMindUA/alembic-actions@v0.4
      with:
        # O comando que você quer executar (upgrade, downgrade, check, etc.)
        dialect: "mysql"
        alembic_ini: "alembic.ini"       
        # connection-uri: mysql+mysqlconnector://root:${{ secrets.DB_PASSWORD }}@127.0.0.1:3306/artisan_test
        pr_revisions_only: "true" 

    - name: Test with pytest
      run: |
        pytest --cov=app tests/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: false

  # JOB 2: security scan
  security_scan:
    name: Security Scans (SAST & DAST)
    runs-on: ubuntu-latest
    # Esta linha garante que o job só rode se o job 'test' passar
    needs: test 
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install bandit

    - name: Static Analysis (SAST) with Bandit
      run: bandit -r . -ll -ii # -r . (recursivo), -ll (médio/alto), -ii (médio/alto)

    - name: Start Flask application in background
      env:
        FLASK_ENV: development
        
        DATABASE_URL: "sqlite:///dast_test.db" 
        FLASK_APP: app
        FLASK_SECRET_KEY: "dast-key"
      run: |
        # 'nohup' e '&' rodam a aplicação em segundo plano, liberando o terminal
        nohup flask run &
    
    - name: Wait for application to start
      run: |
        echo "Waiting for 15 seconds for the app to start..."
        sleep 15
        echo "Done waiting! Starting ZAP Scan."

    - name: Dynamic Analysis (DAST) with OWASP ZAP
      uses: zaproxy/action-full-scan@v0.10.0
      with:
        target: 'http://127.0.0.1:5000'
        
        api_file_name: 'openapi.json' 

        fail_action: false 

        issue_title: 'Vulnerability found by ZAP'
        token: ${{ secrets.GITHUB_TOKEN }}